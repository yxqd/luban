#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import select


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        session_id = pyre.inventory.str('session_id')
        
        objtype = pyre.inventory.str('objtype')
        objid = pyre.inventory.str('objid')
        
        node = pyre.inventory.str('node')
        refnode = pyre.inventory.str('refnode')
        position_type = pyre.inventory.str('position-type')
        

    def movenode(self, director):
        position_type = self.inventory.position_type
        if position_type not in ['after', 'before', 'inside']:
            raise NotImplementedError, position_type

        obj = director.clerk.getRecordByID(
            self.inventory.objtype,
            self.inventory.objid,
            )

        if obj.name != 'visuals':
            raise NotImplementedError
        
        element = director.clerk.db.dereference(
            director.painter._decodeelementid(self.inventory.node, 'treeviewnode') 
            )
        refelement = director.clerk.db.dereference(
            director.painter._decodeelementid(self.inventory.refnode, 'treeviewnode')
            )

        # original parent
        oldparent = director.clerk.findParentDocument(element, obj)
        # remove the element from the old parent's contents
        self._debug.log('deleting element %s from %s...' % (element.id, oldparent.id))
        oldparent.contents.delete(element, director.clerk.db)

        if position_type in ['before', 'after']:
            # new parent
            newparent = director.clerk.findParentDocument(refelement, obj)
            # add the eleemnt to the new parent's contents
            opts = {position_type: refelement}
            self._debug.log(
                'inserting element %s into %s %s %s...' %
                (element.id, newparent.id, self.inventory.position_type, refelement.id))
            newparent.contents.insert(element, db=director.clerk.db, **opts)
            
        elif position_type == 'inside':
            newparent = refelement
            newparent.contents.add(element, db=director.clerk.db)
            
        else:
            raise RuntimeError

        # actions
        actions = []

        # preview
        preview = director.painter._createPreviewForVisual(
            obj, director.clerk,
            session_id = self.inventory.session_id)
        previewupdate = select(id='previewcontainer').replaceContent(preview)
        actions.append(previewupdate)
        #
        # select the current document
        session = self._getSession(director)
        current_document = session.current_document
        if current_document and current_document.id:
            current_document = current_document.dereference(director.clerk.db)
            if current_document:
                previewid = director.painter._previewid(current_document)
                actions.append(
                    select(id=previewid).addClass('selected')
                    )
                
        return actions
    
    
    def __init__(self, name='objtree'):
        super(Actor,self).__init__(name)
        return


    def _getSession(self, director):
        # session
        session_id = self.inventory.session_id
        if not session_id:
            self.inventory.session_id = session_id = 'fortest'
        session = director.clerk.getRecordByID('sessions', session_id)
        return session



def actor():
    return Actor()


# version
__id__ = "$Id$"

# End of file 
