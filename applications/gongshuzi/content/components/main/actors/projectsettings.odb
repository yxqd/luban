#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import alert, load


from luban.components.Actor import Actor as base


class ProjectSettings(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        session_id = pyre.inventory.str('session_id')
        project_id = pyre.inventory.str('project_id')
        settings_id = pyre.inventory.str('settings_id')

        property = pyre.inventory.str('property')
        value = pyre.inventory.str('value')
        

    def processUpdate(self, director):
        session = self._getSession(director)
        db = director.clerk.db

        project = db.dereference(session.project)
        assert project.id == self.inventory.project_id
        
        settingslist = db.dereference(project.settings)
        assert len(settingslist) == 1
        settings = settingslist[0]
        assert settings.id == self.inventory.settings_id

        #
        property = self.inventory.property
        value = self.inventory.value

        if (property=='port'):
            # check if given value is valid
            port = int(value)
            from gongshuzi.components.ProjectServing import getAllPortsUsedExceptMine
            ports = getAllPortsUsedExceptMine(director.clerk.db, settings)
            if port in ports:
                return [
                    alert("Port number %s already taken" % port),
                    load(actor='gongshuzi', routine='loadProject', session_id = session.id),
                    ]
                    
        setattr(settings, property, value)

        director.clerk.updateRecordWithID(settings)

        return


    def __init__(self, name='projectsettings'):
        super(ProjectSettings,self).__init__(name)
        return


    def _getSession(self, director):
        # session
        session_id = self.inventory.session_id
        if not session_id:
            return None
        session = director.clerk.getRecordByID('sessions', session_id)
        return session



def actor():
    return ProjectSettings()


# version
__id__ = "$Id$"

# End of file 
