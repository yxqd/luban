#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.components.Actor import Actor as base


class PropertyEditor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        session_id = pyre.inventory.str('session_id')
        record_id = pyre.inventory.str('record_id')
        

    def processUpdate(self, director):
        session = self._getSession(director)
        
        property = str(self.inventory.property)
        value = self.inventory.value
        
        focus = self._getFocus(director, session=session)
        record_id = self.inventory.record_id
        assert focus.id == record_id, \
               'focus (%s, %s) and record id (%s) not match' % (focus.name, focus.id, record_id)

        Object = director.clerk.orm.getObject(focus.__class__)
        colname = attrname2colname(property, Object)
        oldvalue = focus._getColumnValue(colname)
        focus._setColumnValue(colname, value)
        self._debug.log('focus: %s' % focus)
        director.clerk.updateRecordWithID(focus)

        # this is a hack. should pass this as a parameter
        director.propertyChange = property, value
        director.propertyOldValue = oldvalue
        return director.redirect(
            actor='gongshuzi', routine='handlePropertyChange',
            session_id=self.inventory.session_id)


    def updateConfiguration(self, registry):
        listing = self._listing(registry)
        if listing:
            for k, v in listing:
                setattr(self.inventory, k, v)        
        return []


    def __init__(self, name='propertyeditor'):
        super(PropertyEditor,self).__init__(name)
        return


    def _listing(self, registry):
        if not registry: return []
        listing = [
            (name, descriptor.value) for name, descriptor in registry.properties.iteritems()
            ]

        listing += [
            ("%s.%s" % (nodename, name), value)
            for nodename, node in registry.facilities.iteritems()
            for name, value in self._listing(node)
            ]

        return listing


    def _getSession(self, director):
        # session
        session_id = self.inventory.session_id
        if not session_id:
            self.inventory.session_id = session_id = 'fortest'
        session = director.clerk.getRecordByID('sessions', session_id)
        return session


    def _getFocus(self, director, session=None):
        if not session:
            session = self._getSession(director)
            
        db = director.clerk.db

        if session.categoryselection == 'visuals':
            focus = session.current_document
            if not focus or not focus.id:
                focus = session.current_visual

        elif session.categoryselection == 'actors':
            focus = session.current_actor

        if focus and focus.id:
            focus = focus.dereference(db)

        return focus



from gongshuzi.dom.orm import attrname2colname


def actor():
    return PropertyEditor()


# version
__id__ = "$Id$"

# End of file 
