#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import select

from luban.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        title = pyre.inventory.str('title')
        abstract = pyre.inventory.str('abstract')
        journalindex = pyre.inventory.int('journalindex')


    def default(self, director):

        id = self.inventory.id
        if not id:
            id = pub1id
            try:
                pub1 = director.clerk.getRecordByID(Publication, id)
            except:
                # pub1 not yet exist
                # create it
                pub1 = mossbauerpaper1()
                director.clerk.newRecord(pub1)
                
        pub = director.clerk.getRecordByID(Publication, id)
        
        from luban.content.Page import Page
        page = Page(title='test page')
        document = page.document()
        splitter = document.splitter()
        left = splitter.section()
        middle = splitter.section()
        maindoc = middle.document(id='maindoc')

        p = left.paragraph()
        p.text = ['This is the left side']

        # the form
        form = maindoc.form()

        t = form.text(
            label='Title',
            value=pub.title,
            name='title',
            #size = 80,
            id = 'titleinput',
            )
        
        entries=enumerate(journals)
        s = form.selector(
            label='Journal',
            entries=entries,
            selection=journals.index(pub.journaltitle),
            name='journalindex')

        ta = form.textarea(
            label='Abstract',
            #cols=80, 
            #rows=20,
            value=pub.abstract,
            name='abstract',
            id = 'abstractinput',
            )
        
        # submit button
        submit = form.submitbutton(label="Update")

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'test-weaver',
            routine = 'processForm',
            id = id,
            )
        return page


    def processForm(self, director):
        self._debug.log(self.inventory.id)
        
        errors = {}
        
        title = self.inventory.title
        if not title:
            errors['title'] = 'Title cannot be empty'
            
        abstract = self.inventory.abstract
        if not abstract:
            errors['abstract'] = 'Abstract cannot be empty'

        if errors:
            return self.formError(director, errors=errors)

        self.store(director)
        return self.report(director)


    def store(self, director):
        publication = Publication()
        
        publication.title = self.inventory.title
        publication.abstract = self.inventory.abstract
        publication.journaltitle = journals[self.inventory.journalindex]
        publication.id = self.inventory.id

        self._debug.log(str(publication))
        
        director.clerk.updateRecord(publication)
        return publication


    def formError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%sinput' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    
    def report(self, director):
        id = self.inventory.id
        if not id: id = pub1id
        publication = director.clerk.getRecordByID(Publication, id)

        from luban.content.Document import Document
        document = Document(title=publication.title)

        p = document.paragraph()
        p.text = [publication.journaltitle]

        p = document.paragraph()
        p.text = publication.abstract.split('\n')

        from luban.content import select
        return select(id='maindoc').replaceContent(document)


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _init(self):
        super(Actor, self)._init()
        return


#
journals=[
    'Physical Review Letter',
    'Physical Review B',
    'Zeitschrift fur Physik A Hadrons and Nuclei',
    ]


#
pub1id = 'abcde'
def mossbauerpaper1():
    pub = Publication()
    pub.id = pub1id
    pub.title='Kernresonzfluoreszenz von Gammastrahlung in Ir191'
    pub.abstract='Zusammenfassung  Die Kernresonanzabsorption der dem Zerfall von Os191 folgenden 129 keV-Gammastrahlung in Ir191 wird untersucht. Der Wirkungsquerschnitt fur die Resonanzabsorption wird als Funktion der Temperaturen von Quelle und Absorber im Temperaturbereich 90? K<T< 370? K gemessen. Die Lebenszeit taugamma des 129 keV-Niveaus in Ir191 ergibt sich zu (3,6 ?0,8 +1,3 ) 10?10sec. Der Absorptionsquerschnitt zeigt bei tiefen Temperaturen einen starken Anstieg als Folge der Kristallbindung der Absorber-und Pr?paratsubstanzen. Die Theorie vonLamb uber die Resonanzabsorption langsamer Neutronen in Kristallen wird auf die Kernresonanzabsorption von Gammastrahlung ubertragen. Bei tiefen Temperaturen ergibt sich eine starke Abh?ngigkeit des Wirkungsquerschnittes fur die Kernabsorption von der Frequenzverteilung im Schwingungsspektrum des Festkorpers...'
    pub.journaltitle = 'Zeitschrift fur Physik A Hadrons and Nuclei'
    return pub
    

from lubandemo1.dom.Publication import Publication

def actor():
    return Actor('test-weaver')


# version
__id__ = "$Id$"

# End of file 
