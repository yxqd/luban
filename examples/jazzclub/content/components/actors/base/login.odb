#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                     (C) 2007-2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import select, createCredential, load


from luban.components.Actor import Actor


class Login(Actor):

    class Inventory(Actor.Inventory):

        import pyre.inventory
        username = pyre.inventory.str('username')
        password = pyre.inventory.str('password')


    def default(self, director):
        doc = director.retrieveVisual('base/login')
        return select(id='maindoc').replaceContent(doc)


    def verify(self, director):
        # pass info to sentry
        sentry = director.sentry
        # need to clear the ticket
        sentry.ticket = ''
        sentry.username = self.inventory.username
        sentry.passwd = self.inventory.password

        errors = {}
        
        username = self.inventory.username
        if not username:
            errors['username'] = 'Username cannot be empty'
        elif not director.userIsActive():
            errors['username'] = 'Username does not exist. Please register first.'
            
        password = self.inventory.password
        if not password:
            errors['password'] = 'Password cannot be empty'

        if director.userIsActive() and password and not director.userIsAuthorized():
            errors['password'] = "Invalid password"
        
        if errors:
            return self.formError(director, errors=errors)

        assert director.userIsAuthorized()
        
        self._debug.log('redirect to greeter.greet')
        return [
            createCredential(
                username=director.sentry.username,
                ticket=director.sentry.ticket,
                ),
            load(actor='main/jazzclub', routine='default'),
            ]


    def formError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='login-%s-input' % name).formfield('showError', message=text)
            for name, text in errors.iteritems()
            ]
    
    
    def __init__(self, name=None):
        if name is None:
            name = "login"
        super(Login, self).__init__(name)
        return


    pass # end of Login



def actor():
    return Login()


# version
__id__ = "$Id$"

# End of file 
