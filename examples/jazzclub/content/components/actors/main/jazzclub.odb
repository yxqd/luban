#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content
from luban.content import select, load, createCredential

from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        subject = pyre.inventory.str('subject')
        content = pyre.inventory.str('content')
        thread = pyre.inventory.str('thread')
        newframe = pyre.inventory.bool('newframe')


    def notauthorizedyet(self, director):
        newframe = self.inventory.newframe
        return director.redirect(
            actor='main/jazzclub-anonymous', routine='default',
            newframe=newframe)


    def default(self, director):
        greet = director.retrieveVisual('main/greet')
        navigation = director.retrieveVisual('main/navigation')

        newframe = self.inventory.newframe
        if newframe:
            page = director.retrieveVisual('main/pageSkeleton')

            page.find(id='maindoc').add(greet)
            page.find(id='portletcontainer').add(navigation)
            return page
        
        return [
            select(id='maindoc').replaceContent(greet),
            select(id='portletcontainer').replaceContent(navigation),
            ]


    def greet(self, director, document=None):
        greet = director.retrieveVisual('main/greet')

        return select(id='maindoc').replaceContent(greet)


    def editMessage(self, director, errors=None):
        newthread = not self.thread
        
        user = director.clerk.getUser(director.sentry.username)

        document = luban.content.document(title = 'New post')

        # the form
        form = document.form()

        if newthread:
            t = form.text(
                id='message-subject-input',
                label='Subject',
                value=self.subject,
                name='subject',
                #size = 80,
                )
            label = ''
        else:
            threadrecord = director.clerk.getRecordByID(Thread, self.thread)
            self.subject = 'Re:' + threadrecord.subject
            label = self.subject
        
        ta = form.textarea(
            id='message-content-input',
            label=label,
            #cols=80, rows=20,
            value=self.content,
            name='content')
        
        # submit button
        submit = form.submitbutton(label="Post")

        # action when form is submitted
        id = self.id
        thread = self.thread
        form.onsubmit = select(element=form).submit(
            actor='main/jazzclub',
            routine='processPost',
            id=id,
            thread=thread,
            )
        if not newthread:
            form.onsubmit.params['subject'] = self.subject
        
        return select(id='maindoc').replaceContent(document)


    def processPost(self, director):
        self._debug.log('id=%s, subject=%s, thread=%s, content=%s' % (
            self.id, self.subject, self.thread, self.content))
        
        errors = {}
        if not self.subject:
            errors['subject'] = "Subject cannot be empty"
        if not self.content:
            errors['content'] = 'Content cannot be empty'

        if errors:
            return self.formError(director, errors=errors)

        self.store(director)
        return self.viewThread(director)
    

    def formError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='message-%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]


    def store(self, director):
        # the user
        user = director.clerk.getUser(director.sentry.username)
        userinfo = director.clerk.getUserInfo(director.sentry.username)

        # the thread
        thread = self.thread
        if not thread:
            # create new thread
            thread = Thread()
            thread.id = director.getGUID()
            thread.author = user
            thread.subject = self.subject
            director.clerk.newRecord(thread)
            thread = thread.id
        else:
            # make sure the thread id is correct
            director.clerk.getRecordByID(Thread, thread)

        # the message
        message = Message()
        message.id = director.getGUID()
        message.subject = self.subject
        message.content = self.inventory.content
        message.author = user
        message.thread = thread
        director.clerk.newRecord(message)

        #
        self.inventory.thread = thread
        return


    def viewThread(self, director):
        threadid = self.inventory.thread
        document = director.retrieveComponent(
            'main/thread-messages-view',
            factory="visual", args=[threadid, director],
            vault=['visuals'])
        
        link = luban.content.link(
            label = 'Post a follow up',
            onclick = load(actor='main/jazzclub', routine='editMessage', thread=threadid),
            )
        document.add(link)
            
        return select(id='maindoc').replaceContent(document)


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        self.subject = self.inventory.subject
        self.content = self.inventory.content
        self.thread = self.inventory.thread
        return


    def _init(self):
        super(Actor, self)._init()
        return



import time
from jazzclub.dom.Message import Message
from jazzclub.dom.Thread import Thread
from jazzclub.dom.User import User
from jazzclub.dom.Registrant import Registrant


def actor():
    return Actor('jazzclub')


# version
__id__ = "$Id$"

# End of file 
