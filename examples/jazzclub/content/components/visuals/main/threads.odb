#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



def table(threads, director):
    try: return _table(threads, director)
    except:
        import traceback
        traceback.print_exc()
        

def _table(threads, director):
    from luban.content import load
    import luban.content
    from luban.content.table import Model, View, Table

    class model(Model):

        author = Model.descriptors.str(name='author')
        subject = Model.descriptors.link(name='subject')
        time_created = Model.descriptors.str(name='time_created')
        

    view = View(
        
        columns = [
            View.Column(name='col1',label='Author', measure='author'),
            View.Column(name='col2',label='Subject', editable=True, measure='subject'),
            View.Column(name='col3',label='Created', measure='time_created'),
            ],

        editable = False,
        )

    def getAuthor(thread):
        authorid = thread.author.id
        author = director.clerk.getRecordByID(User, authorid)
        return author.username

    if director.userIsAuthorized():
        actor = 'main/jazzclub'
    else:
        actor = 'main/jazzclub-anonymous'
        
    def getSubject(thread):
        subject = thread.subject
        #return subject
        link = luban.content.link(
            label = subject,
            onclick = load(actor=actor, routine='viewThread', thread=thread.id),
            )
        return link

    def getTimeCreated(thread):
        return str(thread.created)
        import time
        return time.asctime(time.gmtime(thread.created))
        
    import operator
    generators = {
        'author': getAuthor,
        'subject': getSubject,
        'time_created': getTimeCreated,
        }
    
    def d(s):
        r = []
        for col in view.columns:
            measure = col.measure
            value = generators[measure](s)
            r.append(value)
            continue
        return r
    data = [d(j) for j in threads]

    table = Table(model=model, data=data, view=view)

    return table


from jazzclub.dom.User import User


# version
__id__ = "$Id$"

# End of file 
