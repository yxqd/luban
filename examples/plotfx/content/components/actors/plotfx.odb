# -*- python -*-

from luban.content import select, load, alert
import luban.content as lc


from luban.components.Actor import Actor as base

class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        id = pyre.inventory.str('id')
        
        pass
        
        
    def default(self, director):
        "this is the main routine of this main actor"
        # create a new computation
        comp = CurveComputation()
        # save it to db
        orm = director.clerk.orm
        orm.save(comp)
        id = orm(comp).id
        # load skeleton
        frame = self._createSkeleton()
        # fill the input container with the form of the computation
        inputcontainer = frame.find(id='input-container')
        inputcontainer.oncreate = select(element=inputcontainer).replaceContent(
            load(actor='orm/curvecomputation', routine='edit', id=id)
            )
        # action of run button: create plot and add it to the output container
        runbutton = frame.find(id='run-button')
        runbutton.onclick = select(id='output-container').replaceContent(
            load(actor=self.name, routine='createPlot', id=id)
            )
        return frame


    def createPlot(self, director):
        # load computation from db
        id = self.inventory.id
        orm = director.clerk.orm
        comp = orm.load(CurveComputation, id)

        # run the computation to get x, y
        x, y = comp()
        
        # create plot
        plot = lc.plot2d()
        plot.curve(x=list(x), y=list(y))
        
        return plot


    def _createSkeleton(self):
        "create the skeleton of the main interface"
        # the frame
        frame = lc.frame()
        # a splitter to split the space to left, middle, right
        sp = lc.splitter(orientation='horizontal')
        frame.add(sp)
        # left: input
        left = sp.section(Class='align-top')
        left.document(title='Input', id='input-container')
        # middle: run button
        middle = sp.section()
        button = lc.button(id='run-button', label='plot')
        middle.add(button)
        # right: output
        right = sp.section(Class='align-top')
        right.document(title='Output', id='output-container')        

        return frame
        
        
from plotfx.CurveComputation import CurveComputation


def actor():
    return Actor("plotfx")
