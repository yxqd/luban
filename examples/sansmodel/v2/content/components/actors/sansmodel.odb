# -*- python -*-

from luban.content import select, load, alert
import luban.content as lc


from luban.components.Actor import Actor as base

class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        id = pyre.inventory.str('id')
        
	pass
	
        
    def default(self, director):
        # create a new computation
        comp = IQComputation()
        # save it to db
        orm = director.clerk.orm
        orm.save(comp)
        id = orm(comp).id
        # load visual
        vis = director.retrieveVisual("sansmodel")
        # 
	inputcontainer = vis.find(id='input-container')
	inputcontainer.oncreate = select(element=inputcontainer).replaceContent(
	    load(actor='orm/iqcomputation', routine='edit', id=id)
            )
        # action of run button
        runbutton = vis.find(id='run-button')
        runbutton.onclick = select(id='output-container').replaceContent(
            load(actor=self.name, routine='createPlot', id=id)
            )
        return vis


    def createPlot(self, director):
        # load computation from db
        id = self.inventory.id
        orm = director.clerk.orm
        comp = orm.load(IQComputation, id)
        model = comp.model

        # run forward computation
	import numpy as np
	Qarray = np.arange(comp.Qmin, comp.Qmax, comp.Qstep)
	Iarray = [model.run(Q) for Q in Qarray]

	# create plot
	plot = lc.plot2d()
	plot.curve(x=list(Qarray), y=list(Iarray))
	
        return plot
    
        
        
from sansmodel.IQComputation import IQComputation


def actor():
    return Actor("sansmodel")
