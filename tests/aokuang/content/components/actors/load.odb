#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import select, load, alert
import luban.content


from aokuang.components.ActionDemoActor import Actor as base, panel, example, quickpanel
class Actor(base):


    from luban.content.Loading import Loading as action


    class Inventory(base.Inventory):
        
        import pyre.inventory


    @quickpanel(
        title = 'Basic usages',
        description =  [
          '"load" is an action of fundamental importance.',
          'It loads some information from the UI controller.',
          ],
        examples = ['load_example%s' % (i+1) for i in range(3)],
        )
    def load(self, director): pass
    

    # example 1: load a simple value from controller
    @example(
        title='load a simple value',
        description=[
          'A simple value can be loaded from the controller and used to',
          'update the UI.',
        ],
        deps=['onloadsimplevalue'])
    def load_example1(self, director):
        container = luban.content.document()
        p1 = container.paragraph(text=['the text to replace'], id='load_example1_ptoreplace')
        # create a button
        b1 = luban.content.button(label = 'click me', id='load_example1_button')
        # Here we set the "onclick" handler of the button to an action,
        # which will be performed when the button is clicked.
        # The action is to select the paragraph element defined above
        # and replace it with a text string loaded from
        # routine "onloadsimplevalue" of this actor.
        b1.onclick = select(element = p1).replaceContent(
            load(actor = self.name, routine = 'onloadsimplevalue')
            )
        container.add(b1)
        return container

    
    # example 2: load a new UI element from controller
    @example(
        title='load a new UI element',
        description=[
          'A UI element can be loaded from the controller,',
          'to replace a part of the existing UI.',
        ],
        deps=['onloadnewdocument'])
    def load_example2(self, director):
        container = luban.content.document()
        d2 = container.document(title = 'the document to replace')
        b2 = luban.content.button(label = 'click me', id='load_example2_button')
        # Here we set the "onclick" handler of the button to an action,
        # which will be performed when the button is clicked.
        # The action is to select the document element defined above
        # and replace it with a document loaded from
        # routine "onloadnewdocument" of this actor.
        b2.onclick = select(element = d2).replaceBy(
            load(actor = self.name, routine = 'onloadnewdocument')
            )
        container.add(b2)
        return container


    # example 3: load an action
    @example(
        title='load an action',
        description=[
          'In this example, an action is loaded from the controller,',
          'and the loaded action is then executed.',
          'The loaded action is adding a class to a document.',
        ],
        deps=['onloadaction'])
    def load_example3(self, director):
        container = luban.content.document()
        d3 = container.document(
            title = 'The document to change',
            id = 'document-to-change',
            )
        b3 = luban.content.button(label = 'click me', id='load_example3_button')
        # click the button will load from routine onloadaction of this actor.
        # since the loaded is an action, that action will then be performed.
        b3.onclick = load(actor = self.name, routine = 'onloadaction')
        container.add(b3)
        return container


    # handlers
    def onloadsimplevalue(self, director):
        return 'newvalue'


    def onloadnewdocument(self, director):
        newdoc = luban.content.document(title='new document')
        return newdoc


    def onloadaction(self, director):
        # select the element (note keyword id is used to construct the selector)
        # and then add a class "green-border".
        # In web application, this class is rendered as css class,
        # the ".green-border" was defined to have a green border in
        # aokuang.css
        return select(id='document-to-change').addClass('green-border')



def actor():
    return Actor('load')


# version
__id__ = "$Id$"

# End of file 
