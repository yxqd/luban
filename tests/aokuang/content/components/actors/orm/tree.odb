#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


# test orm-generated view of a data object with a owned, polymorphic referenceset



#
import luban.content as lc
from luban.content import select, load, alert


#
from aokuang.dom import Tree

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(Tree.Tree, ActorBase=Actor)
class Actor(base):

    class Inventory(base.Inventory):

        import luban.inventory


    def default(self, director):
        id = self.inventory.id
        if not id:
            self._createTree(director)
        
        view = self.edit(director)
        
        frame = lc.frame(title='title')
        document = frame.document(title='test', id='maindoc')
        document.add(view)
            
        return frame


    def _createTree(self, director):
        root = Tree.Branch(
            name='root',
            nodes=[Tree.Branch(), Tree.Leaf()],
            )
        tree = Tree.Tree(root=root)

        orm = director.clerk.orm
        orm.save(tree)

        self.inventory.id = orm(tree).id
        return


    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.actor_formatter = 'orm/%s'
        return
        

def actor():
    return Actor('orm/tree')


# version
__id__ = "$Id$"

# End of file 
