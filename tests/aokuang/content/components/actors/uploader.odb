#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from luban.content import select, load, alert

from luban.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory
        root = pyre.inventory.str(name = 'root', default = '../content/data/tmp/uploads')
        id = pyre.inventory.str(name='id')


    def default(self, director):
        
        page = lc.page(title='test uploader')
        document = page.document(title='test uploader', id='maindoc')
        
        # create uploader
        uploader = lc.uploader(
            name = 'uploaded',
            label='Upload',
            onsubmit=lc.load(actor='testuploader', routine='receive_file', id='uploadid-111')
            )
        document.add(uploader)

        return page
            
            
    def dynamic(self, director):
        
        page = lc.page(title='test uploader')
        document = page.document(title='test uploader', id='maindoc')
        
        # create uploader
        uploader = lc.uploader(
            name = 'uploaded',
            label='Upload',
            onsubmit=lc.load(actor='testuploader', routine='receive_file'),
            oncomplete=select(element=document).replaceContent('upload complted'),
            )
        link = lc.link(
            label = 'click me',
            onclick = select(element=document).append(uploader)
            )
        document.add(link)

        return page
            
            
    def dialog(self, director):
        # XXXX
        # this is not working yet!
        # XXXX
        
        page = lc.page(title='test uploader')
        document = page.document(title='test uploader', id='maindoc')
        
        # create uploader
        uploader = lc.uploader(
            name = 'uploaded',
            label='Upload',
            onsubmit=lc.load(actor='testuploader', routine='receive_file')
            )
        dialog = lc.dialog(title='upload', autoopen=True)
        dialog.add(uploader)
        
        link = lc.link(
            label = 'click me',
            onclick = select(element=document).append(dialog)
            )
        document.add(link)

        return page
            
            
    def receive_file(self, director):
        self._debug.log('receive file...')
        self._debug.log('upload id: %s' % self.inventory.id)

        if not hasattr(director, 'getUploads'):
            raise RuntimeError, 'getUploads not defined for director'
            
        # the directory to save the uploads
        directory = self.uploadDirectory()

        # make sure the directory exists
        self._debug.log('make sure directory %s exists...' % directory)
        if not os.path.exists(directory):
            try:
                os.makedirs(directory)
            except:
                import traceback
                self._debug.log('failed to create directory %s\n%s' % (
                    directory, traceback.format_exc()))

        # save uploaded files
        self._debug.log('get uploaded stuff')
        try:
            uploads = director.getUploads()
        except:
            import traceback
            self._debug.log('nothing got uploaded\n%s' % traceback.format_exc())
            uploads = {}
            
        self._debug.log('loop over uploads')
        for name, (filename, content) in uploads.iteritems():
            self._debug.log('working on %s:%s' % (name,filename))
            path = os.path.join(directory, '%s-%s' % (name, filename))
            open(path, 'wb').write(content)
            msg = 'saved uploaded file %r to %r.' % (filename, path)
            self._debug.log(msg)
            continue


    def uploadDirectory(self):
        root = self.inventory.root
        id = self.inventory.id
        directory = os.path.abspath(os.path.join(root, id))
        self._debug.log('upload directory: %s'%directory)
        return directory


import os


def actor():
    return Actor('testuploader')


# version
__id__ = "$Id$"

# End of file    
        
