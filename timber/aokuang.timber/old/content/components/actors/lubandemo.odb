#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


class DemoCateogry:

    registry = {}
    
    def __init__(self, name, description, demos):
        self.name = name
        self.description = description
        self.demos = demos
        cls = self.__class__
        cls.registry[name] = self
        return
        


categories = [
    DemoCateogry(
    name = 'actions',
    description = '''
Basic luban "actions"
---------------------

Luban actions are actions to

* manipulate UI elements
* communicate with UI controller

The widget-specific actions will be explained in demos
for the widgets. Here our focus is the basic and common
actions.
''',
    demos = ['load',
             'select',
             'alert',
             ]),
    DemoCateogry(
    name = 'basic widgets',
    description = '''
Basic widget types
------------------

These are basic building blocks of user interface.
    ''',
    demos = ['document',
             'form',
             'link',
             'button',
             'image',
             'dialog',
             'portlet',
             'downloader',
             ]),
    DemoCateogry(
    name = 'organizers',
    description = '''
Organizers
----------

Organizers improve efficiency of usage of space.
    ''',
    demos = ['accordion',
             'tabs',
             'splitter',
             'grid',
             ]),
    DemoCateogry(
    name = 'text-base documents',
    description = '''
Text-base documents
-------------------

Simple documents for texts in various formats.
    ''',
    demos = ['htmldocument',
             'restructuredtext',
             ]),
    DemoCateogry(
    name = 'graphics',
    description = '''
Graphics
--------

Graphical widgets
    ''',
    demos = ['plot2d',
             ]),
    DemoCateogry(
    name = 'misc',
    description = '''
Miscellaneous
-------------


    ''',
    demos = ['codeeditor',
             'progressbar',
             'table',
             'toolbar',
             'newsticker',
             ]),
    ]
#'dock'
#'elementcommonactions
#'errorreporting'
#'finddescendentids'
#'formselectorfield'
#'getsetattr'
#'greet'
#'insertbefore'
#'loadingactions'
#'matterbuilder'
#'oncreate'
#'replaceelement'


import luban.content
from luban.content import select, load, alert


from luban.components.Actor import Actor as base, AcceptArbitraryInput
class Actor(AcceptArbitraryInput, base):

    class Inventory(base.Inventory):
        
        import pyre.inventory
        topic = pyre.inventory.str('topic')



    def default(self, director):
        lc = luban.content
        page = lc.page(title='luban demo')
        frame = self._createFrame(director)
        page.add(frame)
        
        topic = self.inventory.topic
        if topic:
            loadtopic = load(actor=topic, routine='createDemoDocument')
            right = frame.find(id='demopanel')
            right.oncreate = select(element=right).replaceContent(loadtopic)
        return page


    def _createFrame(self, director):
        lc = luban.content
        sp = lc.splitter()
        left = sp.section(id = 'demolistpanel'); left.Class = 'align-top'
        right = sp.section(id = 'demopanel'); right.Class = 'align-top'

        demolist = self._createDemoList(director)
        left.add(demolist)

        intro = lc.restructuredtextdocument(); right.add(intro)
        intro.text = [
            'Luban demo',
            '----------',
            'This is a demo of luban concepts and luban widgets.',
            'Please select a demo from the left side.',
            ]

        category0 = categories[0]
        category0desc = self._createDescriptionDocument(category0)
        right.add(category0desc)

        return sp


    def _createDemoList(self, director):
        lc = luban.content
        container = lc.document()
        p = container.paragraph()
        p.text = ['Please select a demo']
        #
        accordion = lc.accordion(id='demolist'); container.add(accordion)
        notification=select(element=accordion).notify(
            event='changed', actor=self.name,
            routine='onchangecategory',
            )
        accordion.onchange = notification

        for category in categories:
            name = category.name
            actors = category.demos
            description = category.description
            section = accordion.section(label=name, id=name)
            portlet = lc.portlet(); section.add(portlet)
            for actor in actors:
                loadactor = load(actor=actor, routine='createDemoDocument')
                #link = lc.link(
                portlet.item(
                    label=actor,
                    onclick = select(id='demopanel').replaceContent(loadactor)
                    )
                #section.add(link)
                #section.add(lc.paragraph())
                continue
            continue
        
        return container


    def onchangecategory(self, director):
        newsection = self.inventory.newsection
        category = DemoCateogry.registry[newsection]
        doc = self._createDescriptionDocument(category)
        return select(id='demopanel').replaceContent(doc)


    def _createDescriptionDocument(self, category):
        doc = luban.content.restructuredtextdocument()
        doc.text = [category.description]
        doc.text.append('')
        doc.text.append('Please select an item from the left.')
        return doc


def actor():
    return Actor('lubandemo')


# version
__id__ = "$Id$"

# End of file    
        
