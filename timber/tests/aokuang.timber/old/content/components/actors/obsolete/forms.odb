#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert

from luban.components.FormProcessor import FormProcessorInterface
from luban.components.Actor import Actor as base
class Actor(FormProcessorInterface, base):

    class Inventory(base.Inventory):

        import luban.inventory

        boolvar1 = luban.inventory.bool(name='boolvar1')
        boolvar2 = luban.inventory.bool(name='boolvar2')

        radiovar = luban.inventory.str(name='radiovar')

        selectorvar = luban.inventory.str(name='selectorvar')

        textvar = luban.inventory.str(name='textvar')

        textareavar = luban.inventory.str(name='textareavar')

        password = luban.inventory.str(name='password')

        floatvar = luban.inventory.float(name='floatvar', validator=luban.inventory.range(10,20))
        intvar = luban.inventory.int(name='intvar', validator=luban.inventory.range(10,20))
        

    def default(self, director):
        from luban.content.Page import Page
        page = Page(title='title')
        
        document = page.document(title='test form', id='maindoc')
        
        from luban.content.Form import Form
        form = Form(title='test form')
        
        checkbox1 = form.checkbox(
            name='boolvar1', label='check box 1', checked=False, tip='a tip')
        checkbox2 = form.checkbox(
            name='boolvar2', label='check box 2', checked=True, tip='a tip')
        
        rad = form.radio(
            id='radiofield', label='radio', name='radiovar',
            entries=enumerate(['one','two', 'three']), selection=1,
            tip='a tip',
            )
        
        sel = form.selector(label='selector', name='selectorvar',
                           entries=enumerate(['one','two']),
                            selection=0, tip='a tip')
        textfield = form.text(label='textfield', name='textvar', tip='a tip')
        textarea = form.textarea(label='textarea', name='textareavar', tip='a tip')
        pwfield = form.password(label='password', name='password', tip='a tip')
        submit = form.submitbutton(label='submit', tip='a tip')

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'testforms',
            routine = 'processForm')
        document.add(form)
        return page
    

    def test2(self, director):
        """don't use the form mechanism on the textfield.
        submit it as a parameter of 'submit' instead
        """
        from luban.content.Page import Page
        page = Page(title='title')
        
        document = page.document(title='test form', id='maindoc')

        from luban.content.FormTextField import FormTextField
        textfield = FormTextField(label='textfield', name='textvar')
        document.add(textfield)
        
        from luban.content.Form import Form
        form = Form(title='test form')
        
        checkbox1 = form.checkbox(name='boolvar1', label='check box 1', checked=False)
        checkbox2 = form.checkbox(name='boolvar2', label='check box 2', checked=True)
        
        rad = form.radio(
            id='radiofield', label='radio', name='radiovar',
            entries=enumerate(['one','two', 'three']), selection=1,
            )
        
        sel = form.selector(label='selector', name='selectorvar',
                            entries=enumerate(['one','two']),
                            selection=0)

        textarea = form.textarea(label='textarea', name='textareavar')
        pwfield = form.password(label='password', name='password')
        submit = form.submitbutton(label='submit')

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'testforms',
            routine = 'processForm',
            textvar = select(element=textfield).getAttr('value'),
            )
        document.add(form)
        return page
    

    def processForm(self, director):
        from luban.content.Document import Document
        from luban.content import select
        newcontent = Document(title='form submitted')
        newcontent.paragraph(text=['your form was submitted'])

        names = self.inventory.propertyNames()
        names = filter(lambda n: not n.startswith('help'), names)
        vals = [self.inventory.getTraitValue(name) for name in names]
        for k,v in zip(names, vals):
            p = newcontent.paragraph()
            p.text = '%s: %s' % (k,v)
            continue
        
        return select(id='maindoc').replaceContent(newcontent)


    def test3(self, director):
        page = lc.page(title='title')
        
        document = page.document(title='test form', id='maindoc')
        
        from luban.content.Form import Form
        form = Form(title='test form', id='form')

        sp = lc.splitter(); form.add(sp)

        from luban.content.FormTextField import FormTextField
        floatfield = FormTextField(label='float variable', name='floatvar')
        sp.section().add(floatfield)
        
        intfield = FormTextField(label='int variable', name='intvar')
        sp.section().add(intfield)
        
        submit = form.submitbutton(label='submit', tip='a tip')

        # action when form is submitted
        form.onsubmit = select(element=form).submit(
            actor = 'testforms',
            routine = 'processForm3')
        document.add(form)
        
        return page


    def processForm3(self, director):
        errors = self._getInputErrors()
        actions = []
        form = select(id='form')
        for name, error in errors.iteritems():
            a = form.find(name=name).formfield('showError', message=error)
            actions.append(a)
            continue
        return actions
    

def actor():
    return Actor('testforms')


# version
__id__ = "$Id$"

# End of file 
